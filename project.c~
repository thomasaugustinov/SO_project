#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <time.h>

const char *FileExtension(const char path[])
{
    const char *result;
    int i, n;

    n = strlen(path);
    i = n - 1;
    while ((i > 0) && (path[i] != '.') && (path[i] != '/') && (path[i] != '\\')) {
        i--;
    }
    if ((i > 0) && (i < n - 1) && (path[i] == '.') && (path[i - 1] != '/') && (path[i - 1] != '\\')) {
        result = path + i;
    } else {
      printf("The argument given must be a file!\n");
      exit(1);
    }
    return result;
}

int main(int argc, char **argv) {
  if(argc < 2) {
    printf("Not enough arguments\n");
    exit(1);
  }
  char *fileName = argv[1];
  int inputFd = open(fileName, O_RDONLY);
  if (inputFd == -1) {
    perror("Failed to open input file");
    exit(1);
  }
  struct stat fileStats;
  if (fstat(inputFd, &fileStats) == -1) {
    perror("Failed to get file stats!\n");
    close(inputFd);
    exit(1);
  }
  const char *fileExtension = FileExtension(fileName);
  if(strcmp(fileExtension, ".bmp") != 0) {
      printf("File must have a BMP extension!\n");
      exit(1);
  }
  char outputFileName[] = "statistica.txt";
  int outputFd = open(outputFileName, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IXUSR);
  if (outputFd == -1) {
    perror("Failed to open output file");
    close(inputFd);
    exit(1);
  }

  char outputData[512];
  sprintf(outputData, "nume fisier: %s\n", fileName);
  write(outputFd, outputData, strlen(outputData));

  char unusedBuffer[1024];
  read(inputFd, unusedBuffer, 18);

  int width, height;

  read(inputFd, &width, 4);
  read(inputFd, &height, 4);
  
  sprintf(outputData, "inaltime: %d\n", height);
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, "lungime: %d\n", width);
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, "dimensiune: %ld\n", (long)fileStats.st_size);
  write(outputFd, outputData, strlen(outputData));

  sprintf(outputData, "identificatorul utilizatorului: %d\n", fileStats.st_uid);
  write(outputFd, outputData, strlen(outputData));

  sprintf(outputData, "timpul ultimei modificari: %s", ctime(&fileStats.st_mtime));
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, "contorul de legaturi: %ld\n", (long)fileStats.st_nlink);
  write(outputFd, outputData, strlen(outputData));

  sprintf(outputData, "drepturi de acces user: ");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IRUSR) ? "R" : "-");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IWUSR) ? "W" : "-");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IXUSR) ? "X\n" : "-\n");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, "drepturi de acces grup: ");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IRGRP) ? "R" : "-");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IWGRP) ? "W" : "-");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IXGRP) ? "X\n" : "-\n");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, "drepturi de acces altii: ");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IROTH) ? "R" : "-");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IWOTH) ? "W" : "-");
  write(outputFd, outputData, strlen(outputData));
  
  sprintf(outputData, (fileStats.st_mode & S_IXOTH) ? "X\n" : "-\n");
  write(outputFd, outputData, strlen(outputData));

  return 0;
}
